{"version":3,"sources":["Components/SeasonDisplay.js","Components/Spinner.js","index.js"],"names":["SeasonDisplay","latitude","this","props","month","Date","getMonth","season","icon","className","id","error","React","Component","Spinner","message","class","App","state","isLoading","window","navigator","geolocation","getCurrentPosition","position","setState","coords","err","setTimeout","ReactDOM","render","document","querySelector"],"mappings":"4NAqCeA,E,4JAjCX,WACI,IAAIC,EAAWC,KAAKC,MAAMF,SACtBG,GAAQ,IAAIC,MAAOC,WACnBC,EAAS,KAEVN,GAAY,EAEPM,EADAH,GAAS,GAAKA,GAAS,EACd,SAGA,SAGTH,EAAW,IAEXM,EADAH,GAAS,GAAKA,GAAS,EACd,SAGA,UAGjB,IAAMI,EAAkB,WAAXD,EAAsB,YAAc,MACjD,OACI,qCACI,mBAAGE,UAAS,UAAKD,EAAL,SAAmBE,GAAG,aAClC,mBAAGD,UAAS,UAAKD,EAAL,SAAkBE,GAAG,gBACV,4BAArBR,KAAKC,MAAMQ,OAAwC,6BAAMT,KAAKC,MAAMQ,QACzD,OAAXJ,GAAoB,kDAAsBA,EAAtB,kB,GA7BVK,IAAMC,WCYnBC,EAdC,SAACX,GACb,OACI,mCACI,sBAAKO,GAAG,UAAR,UACI,6BAAMP,EAAMY,SAAW,eACvB,qBAAKC,MAAM,mCAAX,SAEI,qBAAKA,MAAM,iDCDzBC,G,wDAGF,WAAYd,GAAQ,IAAD,8BAEf,cAAMA,IAKDe,MAAQ,CAAEjB,SAAU,KAAMU,MAAO,KAAMQ,WAAW,GAPxC,E,qDAUnB,WAAqB,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAEG,EAAKC,SAAS,CAAExB,SAAUuB,EAASE,OAAOzB,cAE9C,SAAC0B,GACG,EAAKF,SAAS,CAAEd,MAAMgB,EAAIZ,aAIlCa,YAAW,WACP,EAAKH,SAAS,CAAEN,WAAU,MAC5B,O,oBAIN,WACI,OACI,qBAAKV,UAAU,YAAf,SACMP,KAAKgB,MAAMC,UAAY,cAAC,EAAD,CAASJ,QAAQ,mCAAsC,cAAC,EAAD,CAAed,SAAWC,KAAKgB,MAAMjB,SAAWU,MAAQT,KAAKgB,MAAMP,c,GAjCjJC,IAAMC,YAsCxBgB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.0c9ba1e2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SeasonDisplay extends React.Component{\r\n\r\n    render(){\r\n        let latitude = this.props.latitude;\r\n        let month = new Date().getMonth();\r\n        let season = null;\r\n\r\n        if(latitude >= 0){\r\n            if( month >= 3 || month <= 8 ){\r\n                season = \"summer\";\r\n            }\r\n            else {\r\n                season = \"winter\";\r\n            }\r\n        }\r\n        else if(latitude < 0){\r\n            if( month >= 9 || month <= 2 ){\r\n                season = \"summer\";\r\n            }\r\n            else {\r\n                season = \"winter\";\r\n            }\r\n        }\r\n        const icon = season === 'winter' ? 'snowflake' : 'sun';\r\n        return(\r\n            <>\r\n                <i className={`${icon} icon` } id=\"icon_top\" />\r\n                <i className={`${icon} icon`} id=\"icon_bottom\" />\r\n                { this.props.error !== 'User denied Geolocation' &&  <h1>{ this.props.error }</h1>}\r\n                { season !== null &&  <h1>It is currently { season } here</h1> }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SeasonDisplay;","const Spinner = (props) => {\r\n    return(\r\n        <>\r\n            <div id=\"spinner\">\r\n                <h2>{ props.message || 'Loading...' }</h2>\r\n                <div class=\"ui active centered inline loader\">\r\n                    \r\n                    <div class=\"ui large text centered inline loader\"></div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './Components/SeasonDisplay';\nimport Spinner from './Components/Spinner';\nimport './index.css';\n\nclass App extends React.Component {\n    // Just a JS method, not specific to React.\n    // It's going to be automatically called with the props object.\n    constructor(props) {\n        // REQUIRED when using constructor\n        super(props);\n        // This is our state object\n        /* This will eventually contain some different \n            properties that are relevant to our app. \n        */\n        this.state = { latitude: null, error: null, isLoading: true };\n    }\n    \n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            (position)  => {\n                // to update our state object, we call setState\n                this.setState({ latitude: position.coords.latitude });\n            },\n            (err)       => {\n                this.setState({ error:err.message })\n            }\n        );\n\n        setTimeout(() => {\n            this.setState({ isLoading:false});\n        },3000);\n    }\n\n    // A required React method when using class-based component.\n    render() {\n        return (\n            <div className=\"container\">\n                { this.state.isLoading ? <Spinner message=\"Please accept location request\" /> : <SeasonDisplay latitude={ this.state.latitude } error={ this.state.error } />}\n            </div>\n        );\n    };\n};\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}